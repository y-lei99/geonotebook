FROM ubuntu:18.04
# Master build file for pangeo images

# Run this section as root
# try to keep conda version in sync with repo2docker
# ========================
ENV CONDA_VERSION=4.8.3-4 \
    CONDA_ENV=notebook \
    NB_USER=jovyan \
    NB_UID=1000 \
    SHELL=/bin/bash \
    LANG=C.UTF-8  \
    LC_ALL=C.UTF-8 \
    CONDA_DIR=/srv/conda

ENV NB_PYTHON_PREFIX=${CONDA_DIR}/envs/${CONDA_ENV} \
    DASK_ROOT_CONFIG=${CONDA_DIR}/etc \
    HOME=/home/${NB_USER} \
    PATH=${CONDA_DIR}/bin:${PATH}

# Create jovyan user, permissions, add conda init to startup script
RUN echo "Creating ${NB_USER} user..." \
    && groupadd --gid ${NB_UID} ${NB_USER}  \
    && useradd --create-home --gid ${NB_UID} --no-log-init --uid ${NB_UID} ${NB_USER} \
    && echo ". ${CONDA_DIR}/etc/profile.d/conda.sh ; conda activate ${CONDA_ENV}" > /etc/profile.d/init_conda.sh \
    && chown -R ${NB_USER}:${NB_USER} /srv

# COPY chown available docker>17.09
# but env sub only works for docker>19.03 (kubernetes>1.17)
# https://github.com/moby/moby/issues/35018
#COPY --chown=${NB_USER}:${NB_USER} . ${HOME}
COPY --chown=jovyan:jovyan . /srv

# SEE: https://github.com/phusion/baseimage-docker/issues/58
# and https://github.com/phusion/baseimage-docker/issues/319
ARG DEBIAN_FRONTEND=noninteractive

RUN echo "Installing Apt-get packages..." \
    && apt-get update --fix-missing \
    && apt-get install -y apt-utils 2> /dev/null \
    && apt-get install -y wget \
    && apt-get -y install gcc python3-dev python3-pip libxml2-dev libxslt1-dev zlib1g-dev g++ \
    && apt-get install -y --no-install-recommends ffmpeg \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*
# ========================

USER ${NB_USER}
WORKDIR ${HOME}

RUN echo "Installing Miniforge..." \
    && URL="https://github.com/conda-forge/miniforge/releases/download/${CONDA_VERSION}/Miniforge3-${CONDA_VERSION}-Linux-x86_64.sh" \
    && wget --quiet ${URL} -O miniconda.sh \
    && /bin/bash miniconda.sh -u -b -p ${CONDA_DIR} \
    && rm miniconda.sh \
    && conda clean -afy \
    && find ${CONDA_DIR} -follow -type f -name '*.a' -delete \
    && find ${CONDA_DIR} -follow -type f -name '*.pyc' -delete

RUN echo "Copying configuration files..." \
    && mv /srv/condarc.yml ${CONDA_DIR}/.condarc \
    && mv /srv/dask_config.yml ${CONDA_DIR}/etc/dask.yml

#EXPOSE 8888

#USER root

#RUN apt-get update && \
#    apt-get -y install gcc python3-dev python3-pip libxml2-dev libxslt1-dev zlib1g-dev g++ && \
#    apt-get install -y --no-install-recommends ffmpeg && \
#    rm -rf /var/lib/apt/lists/*
#USER ${NB_USER}



RUN conda install -c conda-forge gdal
RUN conda install --quiet --yes \
                       'curl' \
                       'pyproj' \
                       'pkg-config' \
                       'ipywidgets' \
                       'setuptools' \
                       'wheel' \
                       'pip3' \
                       'cffi' \
                       'lxml' \
                       'numpy' \
                       'scipy' \
                       'pandas' \
                       'matplotlib' \
                       'seaborn' \
                       'cython' \
                       'statsmodels' \
                       'pyOpenSSL' \
                       'scikit-image' \
                       #'jupyterhub=1.1.0' \
                       && \
                       conda clean --all -f -y && \
                       jupyter nbextension enable --py widgetsnbextension --sys-prefix && \
                       jupyter labextension install @jupyter-widgets/jupyterlab-manager@^1.0.1 --no-build && \
                       jupyter labextension install jupyterlab_bokeh@1.0.0 --no-build && \
                       jupyter lab build && \
                       npm cache clean --force && \
                       rm -rf $CONDA_DIR/share/jupyter/lab/staging && \
                       rm -rf /home/$NB_USER/.cache/yarn && \
                       rm -rf /home/$NB_USER/.node-gyp
                       #fix-permissions $CONDA_DIR && \
                       #fix-permissions /home/$NB_USER
# Generates pip2.7
RUN pip3 install -U pip3 tox

#USER root
# Generate default config and disable authentication
RUN jupyter-notebook --generate-config --allow-root -y
RUN sed -i "s/#c.NotebookApp.token = '<generated>'/c.NotebookApp.token = ''/" /home/jovyan/.jupyter/jupyter_notebook_config.py

RUN pip3 install https://github.com/OpenGeoscience/KTile/archive/master.zip


ADD .  /$CONDA_DIR/geonotebook
#ADD ./devops/docker/jupyter.sh /jupyter.sh
ADD ./devops/docker/jupyter.sh /jupyter.sh
ADD ./devops/docker/start.sh /start.sh
ADD ./devops/docker/start-notebook.sh /start-notebook.sh
ADD ./devops/docker/start-singleuser.sh /start-singleuser.sh
COPY ./devops/docker/start.sh ./devops/docker/start-notebook.sh ./devops/docker/start-singleuser.sh /usr/local/bin/
COPY ./devops/docker/start.sh ./devops/docker/start-notebook.sh ./devops/docker/start-singleuser.sh /$CONDA_DIR/geonotebook/

WORKDIR /$CONDA_DIR/geonotebook
#RUN conda install -c conda-forge gdal
RUN pip3 install -U -r prerequirements.txt . && \
    pip3 install -U -r requirements.txt && \
    conda install -c conda-forge gdal && \
    #jupyter labextension install geonotebook && \
    jupyter serverextension enable --py geonotebook --sys-prefix && \
    jupyter nbextension enable --py geonotebook --sys-prefix
    #jupyter labextension install geonotebook --sys-prefix && \
    #jupyter labextension enable nbextension && \
    #jupyter labextension enable geonotebook && \
    #jupyter lab build
#RUN fix-permissions /$CONDA_DIR/geonotebook
#RUN fix-permissions /usr/local/bin/
#RUN fix-permissions /start.sh
#RUN fix-permissions /start-notebook.sh
#RUN fix-permissions /start-singleuser.sh
#RUN fix-permissions /jupyter.sh

#VOLUME /notebooks
#WORKDIR $Home

USER ${NB_USER}
WORKDIR ${HOME}
#USER root
ENTRYPOINT ["/jupyter.sh"]
#CMD ["jupyter","notebook","--allow-root"]
